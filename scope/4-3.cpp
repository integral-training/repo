#include <iostream>

// プログラムは、特定の範囲毎にシンボルを識別しています。 この範囲のことを スコープ と言います。
// 同一のスコープ内に同名のシンボルが存在した場合、シンボルを一意に識別する事ができないのでリンク時にエラーになります。
// int count(){1 + 1 = 2} int count(){2 + 2 = 4} -> どっちのcount関数を使えばいいのだ？

// スコープを決める範囲のことをブロックと言います。 {} で括られた範囲が一つのブロックになります。
// int main(){
//     return 0;
// }

// 名前空間スコープ
// namespace 名前 {} で名前空間の定義をすることが出来ます。 
// namespace ブロックで括られたシンボルは、その名前空間に属することになります。

namespace O {
    int count = 1; // 名前空間 O に属する変数
    int touch = 3;

    // 名前空間は入れ子にすることが出来ます。
    namespace P {
        int count = 2;

        int Catch(){
            return count;
        }

        int Get(){
            return touch;
        }
    }

    int Catch(){
        // 同一の名前空間に属する場合は、スコープ解決演算子 :: による名前空間の指定を省略することが可能です
        return count;
    }
}

// 名前空間や関数に属さない場所はグローバルスコープ
int xy = 12; // グローバル変数
// グローバル変数は「どこからでも利用することが出来る」という性質上、どこからでも値を書き換えることが出来ます。 
// どこで変数の値が書き換えられたのか特定しづらくなるため、可能な限り使わないことが望ましいです。

int main(){
    // スコープ解決演算子 :: を付けることで、名前空間内のシンボルを利用する事ができます。
    std::cout << O::count << std::endl; 
    std::cout << O::P::Catch() << std::endl;
    std::cout << O::P::Get() << std::endl; // 見つからない値は外側を参照するようになる

    std::cout << ::xy << std::endl; // 明示的にグローバルスコープを指定出来たり

    return 0;
}